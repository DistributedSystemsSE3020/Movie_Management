{"ast":null,"code":"var _jsxFileName = \"D:\\\\University\\\\SLIIT\\\\Lectures\\\\3rdYear\\\\1stSemester\\\\DS\\\\GroupProject\\\\Test\\\\Test\\\\frontend\\\\src\\\\components\\\\CustomerManagement\\\\ResetPassword\\\\ResetPassword.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport axios from 'axios';\nimport \"./ResetPassword.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ResetPassword(props) {\n  _s();\n\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [showPassword, setShowPassword] = useState();\n  const history = useHistory(); //show hide password\n\n  function handleShowPassword() {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  }\n\n  async function reset(event) {\n    event.preventDefault();\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n\n    if (password === confirmPassword) {\n      try {\n        await axios.put(`http://localhost:8070/customer/resetpassword/${props.match.params.token}`, {\n          password\n        }, config);\n        alert(\"Password Reset Successful\");\n        setPassword(\"\");\n        setConfirmPassword(\"\");\n        localStorage.clear();\n        history.push('/');\n      } catch (error) {\n        if (error.response.status === 400) {\n          alert(\"Invalid Token\");\n        } else {\n          alert(\"Password reset failed\");\n        }\n      }\n    } else {\n      alert(\"Passwords don't match\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    align: \"center\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        className: \"boxReset\",\n        onSubmit: reset,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"form-h1\",\n          children: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-muted\",\n          children: \" Enter the new password \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: showPassword ? \"text\" : \"password\",\n          name: \"password\",\n          id: \"password\",\n          placeholder: \"Password\",\n          onChange: event => {\n            setPassword(event.target.value);\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"showhide\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleShowPassword,\n            children: showPassword ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 70,\n              columnNumber: 62\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: showPassword ? \"text\" : \"password\",\n          name: \"confirmpassword\",\n          id: \"confirmpassword\",\n          placeholder: \"Confirm Password\",\n          onChange: event => {\n            setConfirmPassword(event.target.value);\n          },\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"showhide\",\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleShowPassword,\n            children: showPassword ? /*#__PURE__*/_jsxDEV(Visibility, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(VisibilityOff, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 62\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"form-submit-btn\",\n          type: \"submit\",\n          value: \"Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ResetPassword, \"pzWzv2KDw30u10eXJUoj+7Zji1I=\", false, function () {\n  return [useHistory];\n});\n\n_c = ResetPassword;\nexport default ResetPassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPassword\");","map":{"version":3,"sources":["D:/University/SLIIT/Lectures/3rdYear/1stSemester/DS/GroupProject/Test/Test/frontend/src/components/CustomerManagement/ResetPassword/ResetPassword.js"],"names":["React","useState","useHistory","IconButton","Visibility","VisibilityOff","axios","ResetPassword","props","password","setPassword","confirmPassword","setConfirmPassword","showPassword","setShowPassword","history","handleShowPassword","prevShowPassword","reset","event","preventDefault","config","headers","put","match","params","token","alert","localStorage","clear","push","error","response","status","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Visibility from \"@material-ui/icons/Visibility\";\nimport VisibilityOff from \"@material-ui/icons/VisibilityOff\";\nimport axios from 'axios';\nimport \"./ResetPassword.css\";\n\nfunction ResetPassword(props) {\n\n    const [password, setPassword] = useState(\"\");\n    const [confirmPassword, setConfirmPassword] = useState(\"\");\n    const [showPassword, setShowPassword] = useState()\n    const history = useHistory();\n\n    //show hide password\n    function handleShowPassword(){\n        setShowPassword((prevShowPassword) => !prevShowPassword)\n    }\n\n    async function reset(event) {\n        event.preventDefault();\n\n        const config = {\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        };\n        \n        if(password === confirmPassword){\n            try {\n                await axios.put(`http://localhost:8070/customer/resetpassword/${props.match.params.token}`, {password}, config);\n                alert(\"Password Reset Successful\")\n                setPassword(\"\");\n                setConfirmPassword(\"\");\n                localStorage.clear()\n                history.push('/');\n            } catch (error) {\n                if(error.response.status === 400){\n                    alert(\"Invalid Token\")\n                }\n                else{\n                   alert(\"Password reset failed\")\n                }\n            }\n        }else{\n            alert(\"Passwords don't match\");\n        }        \n        \n    }\n\n    return (\n        <div className=\"container\" align=\"center\">\n            <div className=\"card-form\">\n                <form className=\"boxReset\" onSubmit={reset}>\n                    <h1 className=\"form-h1\">Reset Password</h1>\n                    <p className=\"text-muted\"> Enter the new password </p> \n\n                    <input\n                        type={showPassword ? \"text\" : \"password\"} \n                        name=\"password\"\n                        id=\"password\" \n                        placeholder=\"Password\" \n                        onChange={(event)=> {setPassword(event.target.value)}} \n\n                        required \n                    />\n                    <span className=\"showhide\">\n                        <IconButton onClick={handleShowPassword} >\n                            {showPassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                    </span>\n\n                    <input\n                        type={showPassword ? \"text\" : \"password\"} \n                        name=\"confirmpassword\"\n                        id=\"confirmpassword\" \n                        placeholder=\"Confirm Password\" \n                        onChange={(event)=> {setConfirmPassword(event.target.value)}} \n                        required \n                    />\n                    <span className=\"showhide\">\n                        <IconButton onClick={handleShowPassword} >\n                            {showPassword ? <Visibility /> : <VisibilityOff />}\n                        </IconButton>\n                    </span>\n\n                    <input className=\"form-submit-btn\" type=\"submit\" value=\"Reset Password\"/>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default ResetPassword\n"]},"metadata":{},"sourceType":"module"}